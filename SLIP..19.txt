Q1...Write a Java Program to implement Factory method for Pizza Store with createPizza(),
orederPizza(), prepare(), Bake(), cut(), box(). Use this to create variety of pizzaâ€™s like
NyStyleCheesePizza, ChicagoStyleCheesePizza etc.

//program for ny and Chicago cheese pizza
import java.util.ArrayList;
class ChicagoPizzaStore extends PizzaStore
{
Pizza createPizza(String item)
{
if (item.equals("cheese"))
{
return new ChicagoStyleCheesePizza();
}
else return null;
}
}
class ChicagoStyleCheesePizza extends Pizza
{
public ChicagoStyleCheesePizza()
{
name = "Chicago Style Deep Dish Cheese Pizza";
dough = "Extra Thick Crust Dough";
sauce = "Plum Tomato Sauce";
toppings.add("Shredded Mozzarella Cheese");
}
void cut()
{
System.out.println("Cutting the pizza into square slices");
}
}
class DependentPizzaStore
{ public Pizza createPizza(String style, String type)
{ Pizza pizza = null;
if (style.equals("NY"))
{
if (type.equals("cheese"))
{
pizza = new NYStyleCheesePizza();
}
}
if (style.equals("Chicago"))
{
if (type.equals("cheese"))
{
pizza = new ChicagoStyleCheesePizza();
}
}
else
{
System.out.println("Error: invalid type of pizza"); return null;
}
pizza.prepare();
pizza.bake();
pizza.cut();
pizza.box();
return pizza;
}
}
class NYPizzaStore extends PizzaStore
{
Pizza createPizza(String item)
{
if (item.equals("cheese"))
{
return new NYStyleCheesePizza();
}
else return null;
}
}
class NYStyleCheesePizza extends Pizza
{
public NYStyleCheesePizza()
{
name = "NY Style Sauce and Cheese Pizza";
dough = "Thin Crust Dough";
sauce = "Marinara Sauce";
toppings.add("Grated Reggiano Cheese");
}
}
abstract class Pizza
{
String name;
String dough;
String sauce;
ArrayList toppings = new ArrayList();
void prepare()
{
System.out.println("Preparing " + name);
System.out.println("Tossing dough...");
System.out.println("Adding sauce...");
System.out.println("Adding toppings: ");
for (int i = 0; i < toppings.size(); i++)
{
System.out.println(" " + toppings.get(i));
}
}
void bake()
{
System.out.println("Bake for 25 minutes at 350");
}
void cut()
{
System.out.println("Cutting the pizza into diagonal slices");
}
void box()
{
System.out.println("Place pizza in official PizzaStore box");
}
public String getName()
{
return name;
}
public String toString()
{
StringBuffer display = new StringBuffer();
display.append("---- " + name + "---- \n");
display.append(dough + "\n");
display.append(sauce + "\n");
for (int i = 0; i < toppings.size(); i++)
{
display.append((String )toppings.get(i) + "\n");
}
return display.toString();
}
}
abstract class PizzaStore
{
abstract Pizza createPizza(String item);
public Pizza orderPizza(String type)
{
Pizza pizza = createPizza(type);
System.out.println("--- Making a " + pizza.getName() + " ---");
pizza.prepare();
pizza.bake();
pizza.cut();
pizza.box();
return pizza;
}
}
public class Main
{
public static void main(String[] args)
{
PizzaStore nyStore = new NYPizzaStore();
PizzaStore chicagoStore = new ChicagoPizzaStore();
Pizza pizza = nyStore.orderPizza("cheese");
System.out.println("Poonam ordered a " + pizza.getName() + "\n");
pizza = chicagoStore.orderPizza("cheese");
System.out.println("Kadambari ordered a " + pizza.getName() + "\n");
pizza = nyStore.orderPizza("cheese");
}
}
/* program for all pizza types*/
import java.util.ArrayList;
class ChicagoPizzaStore extends PizzaStore
{
Pizza createPizza(String item)
{
if (item.equals("cheese"))
{
return new ChicagoStyleCheesePizza();
}
else if (item.equals("veggie"))
{
return new ChicagoStyleVeggiePizza();
}
else if (item.equals("clam"))
{
return new ChicagoStyleClamPizza();
}
else if (item.equals("pepperoni"))
{
return new ChicagoStylePepperoniPizza();
}
else return null;
}
}
class ChicagoStyleCheesePizza extends Pizza
{
public ChicagoStyleCheesePizza()
{
name = "Chicago Style Deep Dish Cheese Pizza";
dough = "Extra Thick Crust Dough";
sauce = "Plum Tomato Sauce";
toppings.add("Shredded Mozzarella Cheese");
}
void cut()
{
System.out.println("Cutting the pizza into square slices");
}
}
class ChicagoStyleClamPizza extends Pizza
{
public ChicagoStyleClamPizza()
{
name = "Chicago Style Clam Pizza";
dough = "Extra Thick Crust Dough";
sauce = "Plum Tomato Sauce";
toppings.add("Shredded Mozzarella Cheese");
toppings.add("Frozen Clams from Chesapeake Bay");
}
void cut()
{
System.out.println("Cutting the pizza into square slices");
}
}
class ChicagoStylePepperoniPizza extends Pizza
{
public ChicagoStylePepperoniPizza()
{
name = "Chicago Style Pepperoni Pizza";
dough = "Extra Thick Crust Dough";
sauce = "Plum Tomato Sauce";
toppings.add("Shredded Mozzarella Cheese");
toppings.add("Black Olives");
toppings.add("Spinach");
toppings.add("Eggplant");
toppings.add("Sliced Pepperoni");
}
void cut()
{
System.out.println("Cutting the pizza into square slices");
}
}
class ChicagoStyleVeggiePizza extends Pizza
{
public ChicagoStyleVeggiePizza()
{
name = "Chicago Deep Dish Veggie Pizza";
dough = "Extra Thick Crust Dough";
sauce = "Plum Tomato Sauce";
toppings.add("Shredded Mozzarella Cheese");
toppings.add("Black Olives");
toppings.add("Spinach");
toppings.add("Eggplant");
}
void cut()
{
System.out.println("Cutting the pizza into square slices");
}
}
class DependentPizzaStore
{ public Pizza createPizza(String style, String type)
{ Pizza pizza = null;
if (style.equals("NY"))
{
if (type.equals("cheese"))
{
pizza = new NYStyleCheesePizza();
}
else if (type.equals("veggie"))
{
pizza = new NYStyleVeggiePizza();
}
else if (type.equals("clam"))
{
pizza = new NYStyleClamPizza();
}
else if (type.equals("pepperoni"))
{
pizza = new NYStylePepperoniPizza();
}
}
else if (style.equals("Chicago"))
{
if (type.equals("cheese"))
{
pizza = new ChicagoStyleCheesePizza();
}
else if (type.equals("veggie"))
{
pizza = new ChicagoStyleVeggiePizza();
}
else if (type.equals("clam"))
{
pizza = new ChicagoStyleClamPizza();
}
else if (type.equals("pepperoni"))
{
pizza = new ChicagoStylePepperoniPizza();
}
}
else
{
System.out.println("Error: invalid type of pizza"); return null;
}
pizza.prepare();
pizza.bake();
pizza.cut();
pizza.box();
return pizza;
}
}
class NYPizzaStore extends PizzaStore
{
Pizza createPizza(String item)
{
if (item.equals("cheese"))
{
return new NYStyleCheesePizza();
}
else if (item.equals("veggie"))
{
return new NYStyleVeggiePizza();
}
else if (item.equals("clam"))
{
return new NYStyleClamPizza();
}
else if (item.equals("pepperoni"))
{
return new NYStylePepperoniPizza();
}
else return null;
}
}
class NYStyleCheesePizza extends Pizza
{
public NYStyleCheesePizza()
{
name = "NY Style Sauce and Cheese Pizza";
dough = "Thin Crust Dough";
sauce = "Marinara Sauce";
toppings.add("Grated Reggiano Cheese");
}
}
class NYStyleClamPizza extends Pizza
{
public NYStyleClamPizza()
{
name = "NY Style Clam Pizza";
dough = "Thin Crust Dough";
sauce = "Marinara Sauce";
toppings.add("Grated Reggiano Cheese");
toppings.add("Fresh Clams from Long Island Sound");
}
}
class NYStylePepperoniPizza extends Pizza
{
public NYStylePepperoniPizza()
{
name = "NY Style Pepperoni Pizza";
dough = "Thin Crust Dough";
sauce = "Marinara Sauce";
toppings.add("Grated Reggiano Cheese");
toppings.add("Sliced Pepperoni");
toppings.add("Garlic");
toppings.add("Onion");
toppings.add("Mushrooms");
toppings.add("Red Pepper");
}
}
class NYStyleVeggiePizza extends Pizza
{
public NYStyleVeggiePizza()
{
name = "NY Style Veggie Pizza";
dough = "Thin Crust Dough";
sauce = "Marinara Sauce";
toppings.add("Grated Reggiano Cheese");
toppings.add("Garlic");
toppings.add("Onion");
toppings.add("Mushrooms");
toppings.add("Red Pepper");
}
}
abstract class Pizza
{
String name;
String dough;
String sauce;
ArrayList toppings = new ArrayList();
void prepare()
{
System.out.println("Preparing " + name);
System.out.println("Tossing dough...");
System.out.println("Adding sauce...");
System.out.println("Adding toppings: ");
for (int i = 0; i < toppings.size(); i++)
{
System.out.println(" " + toppings.get(i));
}
}
void bake()
{
System.out.println("Bake for 25 minutes at 350");
}
void cut()
{
System.out.println("Cutting the pizza into diagonal slices");
}
void box()
{
System.out.println("Place pizza in official PizzaStore box");
}
public String getName()
{
return name;
}
public String toString()
{
StringBuffer display = new StringBuffer();
display.append("---- " + name + "---- \n");
display.append(dough + "\n");
display.append(sauce + "\n");
for (int i = 0; i < toppings.size(); i++)
{
display.append((String )toppings.get(i) + "\n");
}
return display.toString();
}
}
abstract class PizzaStore
{
abstract Pizza createPizza(String item);
public Pizza orderPizza(String type)
{
Pizza pizza = createPizza(type);
System.out.println("--- Making a " + pizza.getName() + " ---");
pizza.prepare();
pizza.bake();
pizza.cut();
pizza.box();
return pizza;
}
}
public class Main
{
public static void main(String[] args)
{
PizzaStore nyStore = new NYPizzaStore();
PizzaStore chicagoStore = new ChicagoPizzaStore();
Pizza pizza = nyStore.orderPizza("cheese");
System.out.println("Ethan ordered a " + pizza.getName() + "\n");
pizza = chicagoStore.orderPizza("cheese");
System.out.println("Joel ordered a " + pizza.getName() + "\n");
pizza = nyStore.orderPizza("clam");
System.out.println("Ethan ordered a " + pizza.getName() + "\n");
pizza = chicagoStore.orderPizza("clam");
System.out.println("Joel ordered a " + pizza.getName() + "\n");
pizza = nyStore.orderPizza("pepperoni");
System.out.println("Ethan ordered a " + pizza.getName() + "\n");
pizza = chicagoStore.orderPizza("pepperoni");
System.out.println("Joel ordered a " + pizza.getName() + "\n");
pizza = nyStore.orderPizza("veggie");
System.out.println("Ethan ordered a " + pizza.getName() + "\n");
pizza = chicagoStore.orderPizza("veggie");
System.out.println("Joel ordered a " +
pizza.getName() + "\n");
}

Q2.. Write a python program to Implement NaÃ¯ve Bayes.

import numpy as np
import pandas as pd
data=pd.read_csv("user_data1.csv")
print(data)
x=data.iloc[:,[2,4]].values
y=data.iloc[:,4].values
from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.05)
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
xtrain=sc.fit_transform(xtrain)
xtest=sc.fit_transform(xtest)
from sklearn.naive_bayes import GaussianNB
gb=GaussianNB()
gb.fit(xtrain,ytrain)
ypred=gb.predict(xtest)
print(ytest)
print(ypred)
from sklearn.metrics import confusion_matrix
cm=confusion_matrix(ytest,ypred)
print(cm)


Q3...Design a Django application that adds web pages with views and templates.

<html>
<head>
<script type="text/javascript">
 function validate()
 {
 var regName=/^[a-zA-z]+[a-zA-Z]+$/;
 var dateformatdob = /^(0?[1-9]|[12][0-9]|3[01])[\/\-](0?[1-9]|1[012])[\/\-]\d{4}$/;
 var dateformatjdate = /^(0?[1-9]|[12][0-9]|3[01])[\/\-](0?[1-9]|1[012])[\/\-]\d{4}$/;
 //Max six digits, a dot, max two digits after dot
 var salaryformat=/^\d{1,6}(?:\.\d{0,2})?$/
 var name=document.getElementById("txtname").value;
 var dob=document.getElementById("txtdob").value;
 var jdate=document.getElementById("txtjdate").value;
 var salary=document.getElementById("txtsalary").value;
 if(!regName.test(name))
 alert("invalid name is given");
 else
 alert("valid name is given");
 if(!dateformatjdate.test(jdate))
 alert("invalid joining date is given");
 else
 alert("valid joining date is given");
 if(!dateformatdob.test(dob))
 alert("invalid date of birth is given");
 else
 alert("valid date of birth is given is given");
 if(!salaryformat.test(salary))
 alert("invalid salary");
 else
 alert("salary is valid");
 }
</script>
</head>
<body>
<form>
<h1>Employee Rsgistration Details</h1>
 enter employee first name
<input type="text" name="txtfname" id="txtname"><br>
 enter date of birth
<input type="text" name="txtdob" id="txtdob"><br>
 enter joining date
<input type="text" name="txtjdate" id="txtjdate"><br>
 enter salary
<input type="text" name="txtsalary" id="txtsalary"><br>
<input type="button" value="validate" onclick="validate()">
</form>
</body>
</html>
